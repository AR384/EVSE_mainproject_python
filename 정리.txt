이미 있는 기능
- 예약기능
- 위치별 충전소
- 충전 타입 설정 
- 충전 속도에 따른 충전소
EVinfra
집에서 충전하는 사람들의 경우 출퇴근 용으로는 충분할 경우가 많을것
- 장거리 이용시 경로에 따른 충전소   
분명히 병목현상이 생기는 곳이 있을것
    -
사례
장기 미운행시
테슬라의 경우 선을 연결해두면 주기적으로 시스템 테스트 하고 저전압 베터리 재충전 ->베터리 방전 방지

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
**일단 단순 추천시스템은 절대 안되고 의미 없음
=====시나리오=====
1. 완속 급속 소팅 
2. 현재 잔량에 대하여 충전 예상시간 계산
3. 위치기반으로 근처에 내차 타입에 가능 충전소 확인
4. 충전 가능 충전소 안내 
@ 충전소들 중 거리별 가격별로 보여주기 가능

Q. 현재 충전차량대수가 남은곳 기준으로 가까운곳을 보여줄지 가격별로 보여줄지는 정렬로 만으로도 충분하지 않은가? 
# 그럼 ai 추천 시스템이 왜 필요한가? -> ai가 무엇을 위해 필요한가? -> 무엇을 자동화하고 싶은가?

>>>>>>>시나리오<<<<<<<
일단 뭐가 되었든 모델 하나가지곤 해결 못할듯???

베터리 관리를 자동으로 하고 싶음 
    - 사용자는 밥줘야지 생각 들기전에 -> 고갱님 이번주 화요일쯤 충전이 예상되는데 미리 예약해드릴까요? ->아니면 다른 계획이 있으신가요? -> 다른 계획 ex목적지 or 운행없음 에따른 스케쥴링
사용자의 충전 데이터는 어디서 오냐? ocpp 데이터에 남아있음 
    

++++질문 사항+++++
1.그리드위즈의 제품이 설치된 충전소에 한한 스케쥴링 서비스를 제공할것인가?
아니면 모든 충전소에 대하여 고려 후, 그리드위드의 충전소 스케쥴링을 고려할것인가
2.OCPP나 OCPI 프로토콜 기반으로 실시간 데이터 기반의 충전 시나리오 구성를 제공한다고 나와 있는데 이미 최적화 알고리즘이 적용이 되어있는지
3.SkyBlue 서비스를 기반으로한 서비스 구축을 해야하는지?
4.V2G 기술이 도입되는 단계라 적용된 국내차량이 ESS으로서 이용되는 차량이 많지 않은걸로 아는데 이를 활용한 시나리오 구성을 해도 되는지
5. 4에 추가로 현재 V2L의 경우 실사용자


>>>>>>>운행데이터<<<<<<<
주행거리,속도,운행시간
SOC State of Charge 0~100% 배터리의 충전상태 DOD Depth of discharge 방전상태 베터리의 기대 수명
소모 전력량
충전타입
>>>>>>>충전데이터<<<<<<<
충전시간
충전량

>>>>>>>OCPP데이터<<<<<<<
Open Charge Point Protocol
그리드위즈의 경우 4개의 모델이 등록되어 있음
충전기(Charge Point)와 중앙시스템(CSMS) 간 통신
충전기 ↔ 충전사업자 시스템
충전 상태 제어, 충전 시작/중지, 펌웨어 업데이트, 진단
WebSocket (JSON 기반)
카테고리	    주요 메시지	                                                설명
인증 관련	    Authorize	                                                사용자의 RFID 카드 또는 토큰 인증 요청
충전 세션	    StartTransaction, StopTransaction	                        충전 시작 / 종료 요청 및 응답
상태 보고	    StatusNotification	                                        충전기의 상태 변경 보고
미터링	        MeterValues	                                                전력량/전압/전류 등의 측정값 보고
제어 명령	    RemoteStartTransaction, RemoteStopTransaction	            서버가 원격으로 충전을 시작/중지
하트비트	    Heartbeat	                                                충전기가 살아 있음을 주기적으로 알림
부팅/식별       BootNotification	                                        충전기가 전원 인가 후 서버에 등록 요청
진단 및 로그	DiagnosticsStatusNotification, LogStatusNotification	    장치 상태, 펌웨어, 로그 관련
펌웨어 업데이트	FirmwareStatusNotification, UpdateFirmware	                서버가 충전기 펌웨어를 업데이트
예약	        ReserveNow, CancelReservation, GetReservationStatus	        특정 사용자 예약 기능

[충전기] --(OCPP 메시지)--> [CSMS] --> [CPMS DB]
                                |
                                v
                         [OCPI 서버 (로밍)]
                            |
                            v
             [eMSP (카카오/현대/차지비 등) 앱에 노출]


>>>>>>>OCPI데이터<<<<<<<
Open Charge Point Interface
충전 사업자 간 로밍 정보 교환 (e.g. CPO ↔ eMSP)
충전사업자 간 상호 연결 (로밍 등)
REST API (HTTP + JSON)
충전소 위치 공유, 요금 정보, 인증(RFID 등), 세션 정산

관련용어 
TOF 시간대별 요금제 Time of use
심야 평시 피크 최대피크 시간대로 구분 차등 요금
Dynamic Pricing Strategy
다목적 최적화 알고리즘

OBC ON BOARD Charge
BMS Battery Management System
PWM DUTY
V2G vehicle to grid 전력망에 직접 전력공급 수요 반응 자원으로 활용
V2H vehicle to vehicle 다른 차량에 베터리 전력직접 전달
V2L vehicle to Load 야외 활동 캠핑에 전력공급
V2V vehicle to Home 가정 소비 전력 보조


IEC61851 Control Pilot을 이용한 CP STATE관리 A충전중 B연결은 되었으나 충전되지 않을때 C연결되어서 충전중 D Ventilate E Err


관련 자료 링크 
https://hiter.tistory.com/1700
https://newbie-developer.tistory.com/274
https://brunch.co.kr/@lselectric/210
https://m.blog.naver.com/lagrange0115/222142875051

https://www.ampcontrol.io/ocpp-guide/how-to-stop-a-charging-session-with-stoptransaction
<<<<<<<<<<<<<공식 데이터 포멧 문서>>>>>>>>>>>>>>>>
https://ocpp-spec.org/schemas/v2.0.1/?utm_source=chatgpt.com#tag/transactioneventresponse
더미 데이터 1
==ocpp==
{
  "chargingStation": {
    "model": "FastEV200",
    "vendorName": "EVTech",
    "serialNumber": "EVT-20250625001",
    "firmwareVersion": "2.0.1.45"
  },
  "connector": {
    "id": 1,
    "status": "Charging",
    "voltage": 400,
    "current": 32,
    "power": 12.8,
    "temperature": 39.0
  },
  "transaction": {
    "transactionId": "TXN0001",
    "idToken": {
      "idToken": "RFID_12345678",
      "type": "ISO14443"
    },
    "meterStart": 100000,
    "energyDelivered_kWh": 1.25,
    "chargingStart": "2025-06-25T14:00:00Z"
  },
  "authorization": {
    "status": "Accepted",
    "certificateStatus": "Valid"
  },
  "smartCharging": {
    "chargingProfileId": 3001,
    "scheduleStart": "2025-06-25T14:00:00Z",
    "maxPower_kW": 15.0
  },
  "diagnostics": {
    "errorCode": "NoError",
    "heartbeat": "2025-06-25T14:05:00Z",
    "rssi": -65,
    "networkStatus": "Online"
  },
  "localAuthList": {
    "enabled": true,
    "lastUpdated": "2025-06-24T23:00:00Z",
    "numCached": 500
  }
}
==ocpi==
{
  "id": "SESSION0001",
  "start_date_time": "2025-06-25T14:00:00Z",
  "auth_id": "RFID_12345678",
  "location_id": "LOC001",
  "evse_uid": "EVSE001",
  "connector_id": "1",
  "status": "ACTIVE",
  "kwh": 1.25,
  "currency": "KRW",
  "charging_periods": [],
  "last_updated": "2025-06-25T14:05:00Z"
}
==ocpp==
{
  "chargingStation": {
    "model": "FastEV300",
    "vendorName": "GreenCharger",
    "serialNumber": "GRC-20250625002",
    "firmwareVersion": "2.0.1.45"
  },
  "connector": {
    "id": 2,
    "status": "Available",
    "voltage": 0,
    "current": 0,
    "power": 0,
    "temperature": 36.0
  },
  "transaction": {
    "transactionId": "TXN0002",
    "idToken": {
      "idToken": "CARD_987654321",
      "type": "ISO15693"
    },
    "meterStart": 200000,
    "meterStop": 200920,
    "energyDelivered_kWh": 0.92,
    "chargingStart": "2025-06-25T13:00:00Z",
    "chargingEnd": "2025-06-25T13:20:00Z",
    "reason": "EVDisconnected"
  },
  "authorization": {
    "status": "Accepted",
    "certificateStatus": "Valid"
  },
  "smartCharging": {
    "chargingProfileId": 3002,
    "scheduleStart": "2025-06-25T13:00:00Z",
    "maxPower_kW": 20.0
  },
  "diagnostics": {
    "errorCode": "NoError",
    "heartbeat": "2025-06-25T13:21:00Z",
    "rssi": -70,
    "networkStatus": "Online"
  },
  "localAuthList": {
    "enabled": true,
    "lastUpdated": "2025-06-24T23:00:00Z",
    "numCached": 600
  }
}
==ocpi==
{
  "cdr_id": "CDR0002",
  "start_date_time": "2025-06-25T13:00:00Z",
  "end_date_time": "2025-06-25T13:20:00Z",
  "session_id": "TXN0002",
  "auth_id": "CARD_987654321",
  "token_type": "RFID",
  "location": {
    "id": "LOC002",
    "evse_uid": "EVSE002",
    "connector_id": "2"
  },
  "meter_start": 200000,
  "meter_stop": 200920,
  "total_energy": 0.92,
  "currency": "KRW",
  "tariff_id": "TARIFF_STD",
  "charging_periods": [],
  "stop_reason": "EVDisconnected",
  "signed": false,
  "last_updated": "2025-06-25T13:21:00Z"
}


더미 케이스 2 
{
  "chargePointId": "CP_456",
  "transactionId": "TX1001",
  "userId": "CERT_TOKEN_ABC123",
  "vehicleVIN": "VIN2025EV0001",
  "locationId": "LOC2001",
  "evseId": "EVS2001",
  "connectorId": 1,
  "meterStart_Wh": 300000,
  "targetEnergy_kWh": 40,
  "startSOC_percent": 20,
  "chargingStartTime": "2025-06-25T15:00:00Z",
  "chargingProfileId": 2001,
  "profileStartTime": "2025-06-25T15:05:00Z",
  "maxCurrent_A": 16,
  "status": "Charging",
  "networkStatus": "Online",
  "firmwareVersion": "2.0.1.45"
}

